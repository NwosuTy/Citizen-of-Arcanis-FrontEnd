//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.0
//     from Assets/Sunset Labs Project/Scripts/Input System/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""BasicControl"",
            ""id"": ""66345d83-8801-48af-9ed8-d9678619b61a"",
            ""actions"": [
                {
                    ""name"": ""CameraMovement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""48f04eac-71d9-4428-b316-88a23749dd7f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""25330e0a-d5c8-4332-9c83-201c46106cc3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CharacterMovement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""475b3040-233b-4d59-bb34-13d91e27e7e3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""28b01167-9934-4153-94d2-5350f9384cfc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""6c38ed40-c45b-4aa9-8432-69e97ec9c143"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2d2a3f13-c2c6-4367-aa0f-6c21621e3cb2"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""CharacterMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD Vector"",
                    ""id"": ""ecc0ff90-9a1b-4517-8109-55e20ec3e130"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CharacterMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""14b0a3d3-a708-4360-921e-3e99214c6c17"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""CharacterMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3dc009f2-ce77-45e0-a979-fc88522feace"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""CharacterMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b7a0d8c8-ca43-47ab-831b-ec68442f64e3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""CharacterMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4b471586-fbeb-4d22-919d-6f5015328e6a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""CharacterMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow Keys Vector"",
                    ""id"": ""ba41b082-42c2-4701-8c02-f0512a5e52d3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CharacterMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9c870e62-b668-4910-bd31-5ef429ed92aa"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""CharacterMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9d35a94b-5fab-4942-b9e5-8b3e1ed32767"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""CharacterMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6f9b5cc8-7fe7-48f5-b321-773a6b44b8d3"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""CharacterMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e4157749-474c-46a3-8610-b8885579fdb9"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""CharacterMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0e5fcef8-f13d-4c8b-91af-2a86fcbc41c0"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e543ed5-088f-461e-b9bd-c238b43b4460"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76ce3dd7-9a66-4c1f-ab31-0c772ed19e06"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f3bd8aae-8096-4b3b-8ca6-3513f2f78370"",
                    ""path"": ""<XInputController>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8628dde5-3c79-4496-833b-903ccb7af583"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3aa81d63-579b-4c59-90cb-a509db97b4ae"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53fee318-1b0b-4c56-8f13-070c6677fb63"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8ce4ab4-4472-43ef-8731-9c82f014d3aa"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""AuxillaryControl"",
            ""id"": ""8d130505-513f-42de-b210-9d57dd786a14"",
            ""actions"": [
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""de6ce09d-2d77-47ed-8662-42d5200fde07"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LockedIn"",
                    ""type"": ""Button"",
                    ""id"": ""ed27ea78-1369-40f4-ba9d-994546d3c24a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AttackInput"",
                    ""type"": ""Button"",
                    ""id"": ""9f08a77e-018c-4ee7-8788-b145f49dfc1b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cb0041da-83ac-4a8e-836f-238e8d447640"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d62b318-0600-4852-88a7-96e689849e2f"",
                    ""path"": ""<Keyboard>/rightShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99e1a264-c950-4e40-82fe-cf93f44b5e47"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""LockedIn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a77d9ff-bcee-441f-810e-538ba3a5463a"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""LockedIn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ccd836d-161d-4dba-81b4-5f74244cf6ae"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""AttackInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e0809b1-6bc6-4d14-97b5-f72e68aa40f3"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // BasicControl
        m_BasicControl = asset.FindActionMap("BasicControl", throwIfNotFound: true);
        m_BasicControl_CameraMovement = m_BasicControl.FindAction("CameraMovement", throwIfNotFound: true);
        m_BasicControl_Zoom = m_BasicControl.FindAction("Zoom", throwIfNotFound: true);
        m_BasicControl_CharacterMovement = m_BasicControl.FindAction("CharacterMovement", throwIfNotFound: true);
        m_BasicControl_Interact = m_BasicControl.FindAction("Interact", throwIfNotFound: true);
        m_BasicControl_Jump = m_BasicControl.FindAction("Jump", throwIfNotFound: true);
        // AuxillaryControl
        m_AuxillaryControl = asset.FindActionMap("AuxillaryControl", throwIfNotFound: true);
        m_AuxillaryControl_Dash = m_AuxillaryControl.FindAction("Dash", throwIfNotFound: true);
        m_AuxillaryControl_LockedIn = m_AuxillaryControl.FindAction("LockedIn", throwIfNotFound: true);
        m_AuxillaryControl_AttackInput = m_AuxillaryControl.FindAction("AttackInput", throwIfNotFound: true);
    }

    ~@InputControls()
    {
        UnityEngine.Debug.Assert(!m_BasicControl.enabled, "This will cause a leak and performance issues, InputControls.BasicControl.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_AuxillaryControl.enabled, "This will cause a leak and performance issues, InputControls.AuxillaryControl.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BasicControl
    private readonly InputActionMap m_BasicControl;
    private List<IBasicControlActions> m_BasicControlActionsCallbackInterfaces = new List<IBasicControlActions>();
    private readonly InputAction m_BasicControl_CameraMovement;
    private readonly InputAction m_BasicControl_Zoom;
    private readonly InputAction m_BasicControl_CharacterMovement;
    private readonly InputAction m_BasicControl_Interact;
    private readonly InputAction m_BasicControl_Jump;
    public struct BasicControlActions
    {
        private @InputControls m_Wrapper;
        public BasicControlActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @CameraMovement => m_Wrapper.m_BasicControl_CameraMovement;
        public InputAction @Zoom => m_Wrapper.m_BasicControl_Zoom;
        public InputAction @CharacterMovement => m_Wrapper.m_BasicControl_CharacterMovement;
        public InputAction @Interact => m_Wrapper.m_BasicControl_Interact;
        public InputAction @Jump => m_Wrapper.m_BasicControl_Jump;
        public InputActionMap Get() { return m_Wrapper.m_BasicControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BasicControlActions set) { return set.Get(); }
        public void AddCallbacks(IBasicControlActions instance)
        {
            if (instance == null || m_Wrapper.m_BasicControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BasicControlActionsCallbackInterfaces.Add(instance);
            @CameraMovement.started += instance.OnCameraMovement;
            @CameraMovement.performed += instance.OnCameraMovement;
            @CameraMovement.canceled += instance.OnCameraMovement;
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
            @CharacterMovement.started += instance.OnCharacterMovement;
            @CharacterMovement.performed += instance.OnCharacterMovement;
            @CharacterMovement.canceled += instance.OnCharacterMovement;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IBasicControlActions instance)
        {
            @CameraMovement.started -= instance.OnCameraMovement;
            @CameraMovement.performed -= instance.OnCameraMovement;
            @CameraMovement.canceled -= instance.OnCameraMovement;
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
            @CharacterMovement.started -= instance.OnCharacterMovement;
            @CharacterMovement.performed -= instance.OnCharacterMovement;
            @CharacterMovement.canceled -= instance.OnCharacterMovement;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IBasicControlActions instance)
        {
            if (m_Wrapper.m_BasicControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBasicControlActions instance)
        {
            foreach (var item in m_Wrapper.m_BasicControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BasicControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BasicControlActions @BasicControl => new BasicControlActions(this);

    // AuxillaryControl
    private readonly InputActionMap m_AuxillaryControl;
    private List<IAuxillaryControlActions> m_AuxillaryControlActionsCallbackInterfaces = new List<IAuxillaryControlActions>();
    private readonly InputAction m_AuxillaryControl_Dash;
    private readonly InputAction m_AuxillaryControl_LockedIn;
    private readonly InputAction m_AuxillaryControl_AttackInput;
    public struct AuxillaryControlActions
    {
        private @InputControls m_Wrapper;
        public AuxillaryControlActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Dash => m_Wrapper.m_AuxillaryControl_Dash;
        public InputAction @LockedIn => m_Wrapper.m_AuxillaryControl_LockedIn;
        public InputAction @AttackInput => m_Wrapper.m_AuxillaryControl_AttackInput;
        public InputActionMap Get() { return m_Wrapper.m_AuxillaryControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AuxillaryControlActions set) { return set.Get(); }
        public void AddCallbacks(IAuxillaryControlActions instance)
        {
            if (instance == null || m_Wrapper.m_AuxillaryControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AuxillaryControlActionsCallbackInterfaces.Add(instance);
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @LockedIn.started += instance.OnLockedIn;
            @LockedIn.performed += instance.OnLockedIn;
            @LockedIn.canceled += instance.OnLockedIn;
            @AttackInput.started += instance.OnAttackInput;
            @AttackInput.performed += instance.OnAttackInput;
            @AttackInput.canceled += instance.OnAttackInput;
        }

        private void UnregisterCallbacks(IAuxillaryControlActions instance)
        {
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @LockedIn.started -= instance.OnLockedIn;
            @LockedIn.performed -= instance.OnLockedIn;
            @LockedIn.canceled -= instance.OnLockedIn;
            @AttackInput.started -= instance.OnAttackInput;
            @AttackInput.performed -= instance.OnAttackInput;
            @AttackInput.canceled -= instance.OnAttackInput;
        }

        public void RemoveCallbacks(IAuxillaryControlActions instance)
        {
            if (m_Wrapper.m_AuxillaryControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAuxillaryControlActions instance)
        {
            foreach (var item in m_Wrapper.m_AuxillaryControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AuxillaryControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AuxillaryControlActions @AuxillaryControl => new AuxillaryControlActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IBasicControlActions
    {
        void OnCameraMovement(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
        void OnCharacterMovement(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IAuxillaryControlActions
    {
        void OnDash(InputAction.CallbackContext context);
        void OnLockedIn(InputAction.CallbackContext context);
        void OnAttackInput(InputAction.CallbackContext context);
    }
}
